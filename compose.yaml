version: '3'
services:
  db:
    profiles:
      - db-only
      - website
    container_name: pg_container
    image: postgres:13.12-bullseye
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - "postgres_data:/var/lib/postgresql/data"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'"
        ]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s

  pgadmin:
    depends_on:
      db:
        condition: service_healthy
        restart: true
    profiles:
      - db-only
    container_name: pgadmin4_container
    image: dpage/pgadmin4:7.7
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_USER}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  backend:
    container_name: backend
    profiles:
      - website
    depends_on:
      db:
        condition: service_healthy
        restart: true
    build: ./backend
    environment:
      POSTGRES_HOST: pg_container
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
    healthcheck:
      test: curl --fail http://localhost:8000/ || exit 1
      interval: 20s
      timeout: 30s
      retries: 3
      start_period: 60s

  frontend:
    container_name: frontend
    profiles:
      - frontend
      - website
    depends_on:
      - backend
    build: ./frontend
    ports:
      - "3000:3000"

volumes:
  postgres_data:
  pgadmin_data:
